import { useEffect, useMemo, useState } from "react";
import { useNavigate, useParams, useSearchParams } from "react-router-dom";
import { API } from "../api";
import { useAuth } from "../contexts/AuthContext";

import { Card, Typography, Space, Button, Form, Input, Popconfirm, message } from "antd";
import { EditOutlined, DeleteOutlined } from '@ant-design/icons';

import type { Post, Comment } from '../types';

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª—è—Ç—å –ø–æ—Å—Ç –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
 */
export default function PostPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [post, setPost] = useState<Post | null>(null);
  const [comments, setComments] = useState<Comment[]>([]);
  const [loading, setLoading] = useState(false);
  const [editing, setEditing] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { isAdmin, isAuthenticated } = useAuth();
  const canEdit = isAdmin();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const editMode = useMemo(() => searchParams.get("edit") === "1", [searchParams]);

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏ –µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ id –ø–æ—Å—Ç–∞
   */
  const load = async () => {
    if (!id) return;
    setLoading(true);
    try {
      const data = await API.post.getPost<Post>(id);
      setPost(data);
      const c = await API.post.getComments<Comment>(id);
      setComments(c);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ id
  useEffect(() => {
    load();
  }, [id]);

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä edit
  useEffect(() => {
    if (editMode) setEditing(true);
  }, [editMode]);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
   */
  const handleUpdate = async (values: { title: string; shortDescription: string; content: string }) => {
    if (!id || !post?.blogId) return;
    await API.post.updatePost(id, {
      ...values,
      blogId: post.blogId
    });
    message.success("–ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω");
    setEditing(false);
    await load();
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
   * –£–¥–∞–ª—è–µ—Ç –ø–æ—Å—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
   */
  const handleDelete = async () => {
    if (!id) return;
    await API.post.deletePost(id);
    message.success("–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω");
    navigate(-1);
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   */
  const handleAddComment = async (values: { content: string }) => {
    if (!id) return;
    await API.post.addComment(id, values);
    message.success("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω");
    await load();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const handleDeleteComment = async (commentId: string) => {
    await API.post.deleteComment(commentId);
    message.success("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω");
    await load();
  };

  if (!id) return null;

  return (
    <div style={{ maxWidth: 800, margin: '0 auto', padding: '24px 0' }}>
      <Card 
        loading={loading} 
        style={{
          borderRadius: 16,
          boxShadow: '0 8px 32px rgba(0,0,0,0.1)',
          border: 'none',
          overflow: 'hidden'
        }}
        bodyStyle={{ padding: 0 }}
      >
        {/* –ö—Ä–∞—Å–∏–≤–∞—è –æ–±–ª–æ–∂–∫–∞ –ø–æ—Å—Ç–∞ */}
        <div style={{
          height: 200,
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          position: 'relative',
          overflow: 'hidden'
        }}>
          <div style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(255,255,255,0.1)',
            backdropFilter: 'blur(10px)'
          }} />
          
          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ */}
          {canEdit && (
            <div style={{
              position: 'absolute',
              top: 16,
              right: 16,
              zIndex: 10
            }}>
              <Space>
                <Button 
                  type="primary"
                  icon={<EditOutlined />} 
                  onClick={() => setEditing(true)}
                  style={{ 
                    background: 'rgba(255,255,255,0.2)',
                    border: '1px solid rgba(255,255,255,0.3)',
                    backdropFilter: 'blur(10px)'
                  }}
                />
                <Popconfirm 
                  title="–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?" 
                  onConfirm={handleDelete} 
                  okButtonProps={{ danger: true }}
                >
                  <Button 
                    danger
                    icon={<DeleteOutlined />} 
                    style={{ 
                      background: 'rgba(255,255,255,0.2)',
                      border: '1px solid rgba(255,255,255,0.3)',
                      backdropFilter: 'blur(10px)'
                    }}
                  />
                </Popconfirm>
              </Space>
            </div>
          )}
          
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ –Ω–∞ –æ–±–ª–æ–∂–∫–µ */}
          <div style={{
            textAlign: 'center',
            color: 'white',
            position: 'relative',
            zIndex: 1,
            padding: '0 24px'
          }}>
            <Typography.Title 
              level={1} 
              style={{ 
                color: 'white', 
                margin: 0,
                textShadow: '0 4px 8px rgba(0,0,0,0.3)',
                fontSize: '2.5rem',
                fontWeight: 700
              }}
            >
              {post?.title}
            </Typography.Title>
            {post?.shortDescription && (
              <Typography.Paragraph 
                style={{ 
                  color: 'rgba(255,255,255,0.9)', 
                  fontSize: 18,
                  margin: '16px 0 0 0',
                  textShadow: '0 2px 4px rgba(0,0,0,0.3)'
                }}
              >
                {post.shortDescription}
              </Typography.Paragraph>
            )}
          </div>
        </div>
        
        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div style={{ padding: '32px' }}>
        {!editing ? (
          <Space direction="vertical" size="large" style={{ width: "100%" }}>
            {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ */}
            <div style={{
              display: 'flex',
              alignItems: 'center',
              gap: 16,
              padding: '16px 0',
              borderBottom: '1px solid #f0f0f0',
              marginBottom: 24
            }}>
              <div style={{
                display: 'flex',
                alignItems: 'center',
                gap: 8,
                color: '#666'
              }}>
                <span style={{ fontSize: 14 }}>üìÖ</span>
                <Typography.Text type="secondary">
                  {post?.createdAt ? new Date(post.createdAt).toLocaleDateString() : ''}
                </Typography.Text>
              </div>
              {post?.blogName && (
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: 8,
                  color: '#666'
                }}>
                  <span style={{ fontSize: 14 }}>üìù</span>
                  <Typography.Text type="secondary">
                    {post.blogName}
                  </Typography.Text>
                </div>
              )}
            </div>

            {/* –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ */}
            <div style={{
              fontSize: 18,
              lineHeight: 1.8,
              color: '#2c3e50',
              marginBottom: 32
            }}>
              {post?.content}
            </div>



            {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
            <div style={{
              height: 1,
              background: 'linear-gradient(90deg, transparent, #e8e8e8, transparent)',
              margin: '32px 0'
            }} />

            {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ */}
            <div>
              <Typography.Title level={3} style={{ 
                margin: 0, 
                marginBottom: 24,
                color: '#2c3e50',
                display: 'flex',
                alignItems: 'center',
                gap: 8
              }}>
                üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ({comments.length})
              </Typography.Title>
              
              {comments.length > 0 ? (
                <div style={{ marginBottom: 24 }}>
                  {comments.map((comment: Comment) => (
                    <div key={comment.id} style={{
                      padding: '16px',
                      marginBottom: 16,
                      background: '#fafafa',
                      borderRadius: 12,
                      border: '1px solid #f0f0f0',
                      position: 'relative'
                    }}>
                      <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'space-between',
                        marginBottom: 8
                      }}>
                        <div style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: 8
                        }}>
                          <div style={{
                            width: 32,
                            height: 32,
                            borderRadius: '50%',
                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            color: 'white',
                            fontSize: 14,
                            fontWeight: 600
                          }}>
                            {(comment.commentatorInfo?.userLogin || "–ê")[0].toUpperCase()}
                          </div>
                          <div>
                            <Typography.Text strong style={{ color: '#2c3e50' }}>
                              {comment.commentatorInfo?.userLogin || "–ê–Ω–æ–Ω–∏–º"}
                            </Typography.Text>
                            <div>
                              <Typography.Text type="secondary" style={{ fontSize: 12 }}>
                                {new Date(comment.createdAt).toLocaleDateString()}
                              </Typography.Text>
                            </div>
                          </div>
                        </div>
                        {isAdmin() && (
                          <Popconfirm 
                            title="–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?" 
                            onConfirm={() => handleDeleteComment(comment.id)}
                          >
                            <Button 
                              danger 
                              size="small"
                              style={{ borderRadius: 6 }}
                            >
                              –£–¥–∞–ª–∏—Ç—å
                            </Button>
                          </Popconfirm>
                        )}
                      </div>
                      <Typography.Paragraph style={{
                        margin: 0,
                        fontSize: 14,
                        lineHeight: 1.6,
                        color: '#34495e'
                      }}>
                        {comment.content}
                      </Typography.Paragraph>
                    </div>
                  ))}
                </div>
              ) : (
                <div style={{
                  textAlign: 'center',
                  padding: '32px',
                  color: '#999',
                  fontSize: 16
                }}>
                  –ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!
                </div>
              )}

              {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
              {isAuthenticated ? (
                <Card 
                  style={{
                    borderRadius: 12,
                    border: '1px solid #e8e8e8',
                    boxShadow: '0 2px 8px rgba(0,0,0,0.06)'
                  }}
                  title={
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: 8,
                      color: '#2c3e50'
                    }}>
                      ‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    </div>
                  }
                >
                  <Form layout="vertical" onFinish={handleAddComment}>
                    <Form.Item 
                      name="content" 
                      rules={[
                        { required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' },
                        { min: 20, message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤' },
                        { max: 300, message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 300 —Å–∏–º–≤–æ–ª–æ–≤' }
                      ]}
                    >
                      <Input.TextArea 
                        rows={4} 
                        placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)..." 
                        maxLength={300}
                        showCount
                        style={{
                          borderRadius: 8,
                          border: '1px solid #d9d9d9'
                        }}
                      />
                    </Form.Item>
                    <Button 
                      type="primary" 
                      htmlType="submit"
                      style={{
                        borderRadius: 8,
                        height: 40,
                        fontWeight: 500
                      }}
                    >
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    </Button>
                  </Form>
                </Card>
              ) : (
                <Card 
                  style={{
                    borderRadius: 12,
                    border: '1px solid #e8e8e8',
                    background: '#fafafa'
                  }}
                  title={
                    <div style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: 8,
                      color: '#2c3e50'
                    }}>
                      üîí –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    </div>
                  }
                >
                  <div style={{
                    textAlign: 'center',
                    padding: '24px',
                    color: '#666'
                  }}>
                    <Typography.Paragraph style={{ margin: 0, fontSize: 16 }}>
                      –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 
                      <Button 
                        type="link" 
                        onClick={() => navigate("/login")} 
                        style={{ 
                          padding: 0, 
                          height: 'auto',
                          fontSize: 16,
                          fontWeight: 500
                        }}
                      >
                        –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
                      </Button>
                    </Typography.Paragraph>
                  </div>
                </Card>
              )}
            </div>
        </Space>
      ) : (
        <div style={{ padding: '24px 0' }}>
          <Typography.Title level={3} style={{ marginBottom: 24, color: '#2c3e50' }}>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
          </Typography.Title>
          <Form layout="vertical" initialValues={{ title: post?.title, shortDescription: post?.shortDescription, content: post?.content }} onFinish={handleUpdate}>
            <Form.Item label="–ó–∞–≥–æ–ª–æ–≤–æ–∫" name="title" rules={[{ required: true, min: 2, max: 30 }]}>
              <Input style={{ borderRadius: 8 }} />
            </Form.Item>
            <Form.Item label="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ" name="shortDescription" rules={[{ required: true, min: 3, max: 50 }]}>
              <Input.TextArea rows={2} style={{ borderRadius: 8 }} />
            </Form.Item>
            <Form.Item label="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ" name="content" rules={[{ required: true, min: 5, max: 1000 }]}>
              <Input.TextArea rows={8} style={{ borderRadius: 8 }} />
            </Form.Item>
            <Space>
              <Button 
                onClick={() => setEditing(false)}
                style={{ borderRadius: 8 }}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button 
                type="primary" 
                htmlType="submit"
                style={{ borderRadius: 8 }}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </Button>
            </Space>
          </Form>
        </div>
      )}
        </div>
      </Card>
    </div>
  );
}


